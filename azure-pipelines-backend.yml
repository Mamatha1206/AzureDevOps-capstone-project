# Docker
# Build and push an image to Azure Container Registry

trigger:
  paths:
    include:
      - capstoneproject/backend/*

resources:
- repo: self

pool:
  name: pradhi-agentpool

variables:
  dockerRegistryServiceConnection: '10dbde16-a200-4e66-8a8b-22451b4fd7ad'
  imageRepository: 'backend'
  containerRegistry: 'pradhiregistry.azurecr.io'
  dockerfilePath: '$(Build.SourcesDirectory)/capstoneproject/backend/Dockerfile'
  tag: '$(Build.BuildId)'

stages:
- stage: Lint
  displayName: Run Linter and SonarQube Analysis
  jobs:
  - job: Lint
    displayName: Lint and SonarQube Scan
    steps:
    - checkout: self

    - task: SonarQubePrepare@5
      inputs:
        SonarQube: 'SonarQube'
        scannerMode: 'CLI'
        configMode: 'manual'
        cliprojectKey: 'capstone-backend'
        cliprojectName: 'capstone-backend'
        cliprojectVersion: '1.0'
        extraProperties: |
          sonar.go.coverage.reportPaths=$(Build.SourcesDirectory)/capstoneproject/backend/coverage.out
          sonar.go.golangci-lint.reportPaths=$(Build.SourcesDirectory)/capstoneproject/backend/golangci-lint-report.xml

    - script: |
        echo "Setting up Go environment..."
        export GOROOT=/usr/local/go
        export GOPATH=$HOME/go
        export PATH=$GOROOT/bin:$GOPATH/bin:$PATH

        cd $(Build.SourcesDirectory)/capstoneproject/backend

        echo "Tidying Go modules..."
        go mod tidy

        echo "Running Go linter..."
        golangci-lint run --out-format checkstyle > golangci-lint-report.xml || true

        echo "Running unit tests with coverage..."
        go test -coverprofile=coverage.out ./...
      displayName: 'Lint, Tidy Modules, and Run Tests'

    # Verbose test output to verify tests are running
    - script: |
        echo "Running tests with verbose output..."
        export PATH=$PATH:/usr/local/go/bin
        cd $(Build.SourcesDirectory)/capstoneproject/backend
        go version
        go test ./... -v
      displayName: 'Verbose Test Output'

    # Print coverage report to validate content
    - script: |
        echo "Printing coverage.out contents..."
        cat $(Build.SourcesDirectory)/capstoneproject/backend/coverage.out
      displayName: 'Print Coverage Report'

    # Publish coverage report as pipeline artifact
    - publish: $(Build.SourcesDirectory)/capstoneproject/backend/coverage.out
      artifact: coverage

    - task: SonarQubeAnalyze@5

    - task: SonarQubePublish@5
      inputs:
        pollingTimeoutSec: '300'

# Build Stage
- stage: Build
  displayName: Build and Push Docker Image
  dependsOn: Lint
  jobs:
  - job: Build
    displayName: Build and Push Docker Image
    steps:
    - task: Docker@2
      displayName: Build Docker Image
      inputs:
        command: 'build'
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
          latest

    - task: Docker@2
      displayName: Push Docker Image
      inputs:
        command: 'push'
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
          latest

# Trivy Scan Stage
- stage: Scan
  displayName: Trivy Image Scan
  dependsOn: Build
  jobs:
  - job: ScanImage
    displayName: Trivy Image Scan
    steps:
    - script: |
        echo "Logging into Azure Container Registry..."
        az acr login --name pradhiregistry
        echo "Scanning Docker image for vulnerabilities with Trivy..."
        trivy image --exit-code 1 --severity HIGH,CRITICAL --ignore-unfixed --no-progress --ignorefile $(Build.SourcesDirectory)/capstoneproject/backend/.trivyignore pradhiregistry.azurecr.io/backend:$(tag)
      displayName: 'Trivy Vulnerability Scan'

# Deploy Stage
- stage: Deploy_main
  displayName: Deploy to AKS
  dependsOn: Scan
  jobs:
  - job: DeployToAKS
    displayName: Deploy Backend to AKS
    steps:
    - checkout: self

    - task: KubernetesManifest@1
      displayName: Deploy Backend to AKS
      inputs:
        action: 'deploy'
        connectionType: 'kubernetesServiceConnection'
        kubernetesServiceConnection: 'pradhi-k8s-scn'
        namespace: 'default'
        manifests: 'capstoneproject/backend/k8s/*.yaml'
        containers: |
          backend:$(containerRegistry)/$(imageRepository):$(tag)

- stage: Deploy_backup
  displayName: Deploy to AKS
  dependsOn: Scan
  jobs:
  - job: DeployToAKS
    displayName: Deploy Backend to AKS
    steps:
    - checkout: self

    - task: KubernetesManifest@1
      displayName: Deploy Backend to AKS
      inputs:
        action: 'deploy'
        connectionType: 'kubernetesServiceConnection'
        kubernetesServiceConnection: 'k8sconnection2'
        namespace: 'default'
        manifests: 'capstoneproject/backend/k8s/*.yaml'
        containers: |
          backend:$(containerRegistry)/$(imageRepository):$(tag)
